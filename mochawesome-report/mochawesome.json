{
  "stats": {
    "suites": 7,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-26T02:04:05.985Z",
    "end": "2024-09-26T02:04:11.063Z",
    "duration": 5078,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e3becbe9-aba2-4ef4-9e95-5e20122afee5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 17,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai'); \nexpect = chai.expect;",
          "err": {},
          "uuid": "e2e69a6b-1d14-4be1-9f24-c5f8309d448a",
          "parentUUID": "e3becbe9-aba2-4ef4-9e95-5e20122afee5",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chai = await import('chai'); \nexpect = chai.expect;",
          "err": {},
          "uuid": "10861c2a-0c18-4241-8561-9062710388d7",
          "parentUUID": "e3becbe9-aba2-4ef4-9e95-5e20122afee5",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "34ecc3b1-6ce9-46a9-9abf-808e57323eba",
          "title": "Authentication login testing",
          "fullFile": "D:\\Belajar\\Sanbercode\\Automation Tester\\Mocha\\test\\authentications.test.js",
          "file": "\\test\\authentications.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 201 and success login authentication",
              "fullTitle": "Authentication login testing should return 201 and success login authentication",
              "timedOut": false,
              "duration": 1659,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await registerAndAuthenticate(email);\nexpect(res.status).to.equal(201); \nexpect(res.body).to.have.property('status', 'success'); \nexpect(res.body).to.have.property('message', 'Authentication berhasil ditambahkan'); \nexpect(res.body.data).to.have.property('user'); \nexpect(res.body.data.user.email).to.equal(email);\nif (_.has(res.body, 'data')) {\n  global.token = res.body.data.accessToken;\n  global.refreshToken = res.body.data.refreshToken;\n}",
              "err": {},
              "uuid": "725d1c44-315f-4af6-8d3f-6a6379a712b5",
              "parentUUID": "34ecc3b1-6ce9-46a9-9abf-808e57323eba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "725d1c44-315f-4af6-8d3f-6a6379a712b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1659,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "90eadaae-d437-4dbb-a0a9-97ba6603f5f0",
          "title": "Users Module",
          "fullFile": "D:\\Belajar\\Sanbercode\\Automation Tester\\Mocha\\test\\major.test.js",
          "file": "\\test\\major.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16182edc-e633-4777-850a-58205c9b4e06",
              "title": "POST /users",
              "fullFile": "D:\\Belajar\\Sanbercode\\Automation Tester\\Mocha\\test\\major.test.js",
              "file": "\\test\\major.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return 201 and successfully create a user",
                  "fullTitle": "Users Module POST /users Should return 201 and successfully create a user",
                  "timedOut": false,
                  "duration": 679,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  tempName, email: tempEmail, password: \"12345\"});\n\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('status', 'success');\nexpect(res.body).to.have.property('message', 'User berhasil ditambahkan');\nexpect(res.body).to.have.property('data');\nexpect(res.body.data).to.have.property('userId');\nif (_.has(res.body, 'data') && _.has(res.body.data, 'userId')) {\n    global.userId = res.body.data.userId;\n}",
                  "err": {},
                  "uuid": "467d3f2a-e094-4615-8327-0a82d2baa500",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to email has registered",
                  "fullTitle": "Users Module POST /users Should return 400 due to email has registered",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  tempName, email: tempEmail, password: \"12345\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', 'Email sudah digunakan');",
                  "err": {},
                  "uuid": "1f12ce57-4849-4e5a-8121-8389a512bbc6",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to invalid email format",
                  "fullTitle": "Users Module POST /users Should return 400 due to invalid email format",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  tempName, email: invalidEmail, password: \"12345\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"email\\\" must be a valid email');",
                  "err": {},
                  "uuid": "a01adbe2-1254-4abf-bdb2-d2b4e6603183",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to missing name field",
                  "fullTitle": "Users Module POST /users Should return 400 due to missing name field",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({email: tempEmail, password: \"12345\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"name\\\" is required');",
                  "err": {},
                  "uuid": "3fa92491-1ff9-4466-8d1f-ec86cc0c6eed",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to missing email field",
                  "fullTitle": "Users Module POST /users Should return 400 due to missing email field",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  tempName, password: \"12345\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"email\\\" is required');",
                  "err": {},
                  "uuid": "6c61a4f3-4e12-4f4f-801b-649e951cde66",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to missing password field",
                  "fullTitle": "Users Module POST /users Should return 400 due to missing password field",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  tempName, email: tempEmail});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"password\\\" is required');",
                  "err": {},
                  "uuid": "1e684c9d-e9e0-4736-9c40-7ab11959ef18",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to empty value in name field",
                  "fullTitle": "Users Module POST /users Should return 400 due to empty value in name field",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  \"\", email: tempEmail, password: \"12345\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"name\\\" is not allowed to be empty');",
                  "err": {},
                  "uuid": "dadcadea-c52d-4069-9aec-333008fbd93a",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to empty value in email field",
                  "fullTitle": "Users Module POST /users Should return 400 due to empty value in email field",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  tempName, email: \"\", password: \"12345\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"email\\\" is not allowed to be empty');",
                  "err": {},
                  "uuid": "3fa485a6-2f5c-4490-a497-c67822bde09e",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to empty value in password field",
                  "fullTitle": "Users Module POST /users Should return 400 due to empty value in password field",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .post('/users')\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  tempName, email: tempEmail, password: \"\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"password\\\" is not allowed to be empty');",
                  "err": {},
                  "uuid": "3811551a-1572-4767-b5ea-71ceb313886a",
                  "parentUUID": "16182edc-e633-4777-850a-58205c9b4e06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "467d3f2a-e094-4615-8327-0a82d2baa500",
                "1f12ce57-4849-4e5a-8121-8389a512bbc6",
                "a01adbe2-1254-4abf-bdb2-d2b4e6603183",
                "3fa92491-1ff9-4466-8d1f-ec86cc0c6eed",
                "6c61a4f3-4e12-4f4f-801b-649e951cde66",
                "1e684c9d-e9e0-4736-9c40-7ab11959ef18",
                "dadcadea-c52d-4069-9aec-333008fbd93a",
                "3fa485a6-2f5c-4490-a497-c67822bde09e",
                "3811551a-1572-4767-b5ea-71ceb313886a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1527,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "01775221-18ee-41cc-a8e7-a2f5d56bd871",
              "title": "GET /users/{userId}",
              "fullFile": "D:\\Belajar\\Sanbercode\\Automation Tester\\Mocha\\test\\major.test.js",
              "file": "\\test\\major.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return 200 and successfully get by ID",
                  "fullTitle": "Users Module GET /users/{userId} Should return 200 and successfully get by ID",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('status', 'success');\nexpect(res.body).to.have.property('data');\nexpect(res.body.data.user).to.have.property('id', global.userId);",
                  "err": {},
                  "uuid": "f6f6ac60-e1a2-47cf-8604-389f5258e010",
                  "parentUUID": "01775221-18ee-41cc-a8e7-a2f5d56bd871",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 404 due to non-existent ID",
                  "fullTitle": "Users Module GET /users/{userId} Should return 404 due to non-existent ID",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let invalidId = \"6d6c1840-ba23-4ae2-80b4-9999999\";\nexpect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users/${invalidId}`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', 'id tidak valid');",
                  "err": {},
                  "uuid": "18888553-d264-41c6-adaf-2b5cf6e871aa",
                  "parentUUID": "01775221-18ee-41cc-a8e7-a2f5d56bd871",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 404 due to invalid type of ID",
                  "fullTitle": "Users Module GET /users/{userId} Should return 404 due to invalid type of ID",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let invalidId = \"12345\";\n\nexpect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users/${invalidId}`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', 'id tidak valid');",
                  "err": {},
                  "uuid": "58267b4f-9ee8-4931-8703-21668b2cbc39",
                  "parentUUID": "01775221-18ee-41cc-a8e7-a2f5d56bd871",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 404 due to missing userId parameter",
                  "fullTitle": "Users Module GET /users/{userId} Should return 404 due to missing userId parameter",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users/`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('status', '404');\nexpect(res.body).to.have.property('message', 'Not Found');",
                  "err": {},
                  "uuid": "f0564d20-848d-48c5-bbe8-ef8b10e7bc7a",
                  "parentUUID": "01775221-18ee-41cc-a8e7-a2f5d56bd871",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6f6ac60-e1a2-47cf-8604-389f5258e010",
                "18888553-d264-41c6-adaf-2b5cf6e871aa",
                "58267b4f-9ee8-4931-8703-21668b2cbc39",
                "f0564d20-848d-48c5-bbe8-ef8b10e7bc7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 441,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c291d766-0c82-4397-ad09-90bec019b4e3",
              "title": "GET /users",
              "fullFile": "D:\\Belajar\\Sanbercode\\Automation Tester\\Mocha\\test\\major.test.js",
              "file": "\\test\\major.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return 200 and successfully get all users",
                  "fullTitle": "Users Module GET /users Should return 200 and successfully get all users",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res).to.have.property('status', 200);\nexpect(res.body).to.include({ status: 'success' })\n    .and.to.have.nested.property('data.users').that.is.an('array')\n    .with.lengthOf.above(0);",
                  "err": {},
                  "uuid": "6c4577ba-fa02-4c0d-ae7a-eeae456c73bd",
                  "parentUUID": "c291d766-0c82-4397-ad09-90bec019b4e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 200 and successfully get all users by name",
                  "fullTitle": "Users Module GET /users Should return 200 and successfully get all users by name",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users?q=${tempName}`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res).to.have.property('status', 200);\nexpect(res.body).to.include({ status: 'success' })\n    .and.to.have.nested.property('data.users').that.is.an('array')\n    .with.lengthOf.above(0);",
                  "err": {},
                  "uuid": "184da03b-9cc8-4104-a3a0-a00842bf5fad",
                  "parentUUID": "c291d766-0c82-4397-ad09-90bec019b4e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 200 and successfully get all users by page",
                  "fullTitle": "Users Module GET /users Should return 200 and successfully get all users by page",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users?p=1`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res).to.have.property('status', 200);\nexpect(res.body).to.include({ status: 'success' })\n    .and.to.have.nested.property('data.users').that.is.an('array')\n    .with.lengthOf.above(0);",
                  "err": {},
                  "uuid": "4ca4302a-0caa-44fb-a2b7-95a6284e6869",
                  "parentUUID": "c291d766-0c82-4397-ad09-90bec019b4e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 200 and successfully get all users by name & page",
                  "fullTitle": "Users Module GET /users Should return 200 and successfully get all users by name & page",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users?q=${tempName}&p=1`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res).to.have.property('status', 200);\nexpect(res.body).to.include({ status: 'success' })\n    .and.to.have.nested.property('data.users').that.is.an('array')\n    .with.lengthOf.above(0);",
                  "err": {},
                  "uuid": "9f73918d-d03a-48ad-8fc8-3b96a8600f3b",
                  "parentUUID": "c291d766-0c82-4397-ad09-90bec019b4e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 200 and show empty users",
                  "fullTitle": "Users Module GET /users Should return 200 and show empty users",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nconst res = await request(baseUrl)\n    .get(`/users?q=382829919`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res).to.have.property('status', 200);\nexpect(res.body).to.include({ status: 'success' })\n    .and.to.have.nested.property('data.users').that.is.an('array')\n    .with.lengthOf(0);",
                  "err": {},
                  "uuid": "bb8cda7b-c38d-4ea4-9853-8c2ce39261e8",
                  "parentUUID": "c291d766-0c82-4397-ad09-90bec019b4e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c4577ba-fa02-4c0d-ae7a-eeae456c73bd",
                "184da03b-9cc8-4104-a3a0-a00842bf5fad",
                "4ca4302a-0caa-44fb-a2b7-95a6284e6869",
                "9f73918d-d03a-48ad-8fc8-3b96a8600f3b",
                "bb8cda7b-c38d-4ea4-9853-8c2ce39261e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 516,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fac554f8-337e-4f75-9980-424fb8b81e3f",
              "title": "PUT /users",
              "fullFile": "D:\\Belajar\\Sanbercode\\Automation Tester\\Mocha\\test\\major.test.js",
              "file": "\\test\\major.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return 201 and successfully update user",
                  "fullTitle": "Users Module PUT /users Should return 201 and successfully update user",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .put(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  updateName, email: tempEmail});\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('status', 'success');\nexpect(res.body).to.have.property('message', 'User berhasil diupdate');\nexpect(res.body.data).to.have.property('name', updateName);",
                  "err": {},
                  "uuid": "e1960f04-016b-45dd-b1ae-dcaa32ec63c2",
                  "parentUUID": "fac554f8-337e-4f75-9980-424fb8b81e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 404 due to user not found",
                  "fullTitle": "Users Module PUT /users Should return 404 due to user not found",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .put(`/users/99999`)\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  updateName, email: tempEmail});\n\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', 'id tidak valid');",
                  "err": {},
                  "uuid": "2f3a8544-3bfe-474f-b870-207a47729452",
                  "parentUUID": "fac554f8-337e-4f75-9980-424fb8b81e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to invalid email",
                  "fullTitle": "Users Module PUT /users Should return 400 due to invalid email",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .put(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name:  updateName, email: invalidEmail});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"email\\\" must be a valid email');",
                  "err": {},
                  "uuid": "3e45224e-9779-49a0-8664-1eb3a10e405c",
                  "parentUUID": "fac554f8-337e-4f75-9980-424fb8b81e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due missing name field",
                  "fullTitle": "Users Module PUT /users Should return 400 due missing name field",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .put(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({ email: tempEmail });\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"name\\\" is required');",
                  "err": {},
                  "uuid": "42ccd472-478e-4c57-988c-e4f0c4744eb5",
                  "parentUUID": "fac554f8-337e-4f75-9980-424fb8b81e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due missing email field",
                  "fullTitle": "Users Module PUT /users Should return 400 due missing email field",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .put(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({ name: tempName });\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"email\\\" is required');",
                  "err": {},
                  "uuid": "a9894134-ab11-499f-a9b3-dcdc3cb7aae7",
                  "parentUUID": "fac554f8-337e-4f75-9980-424fb8b81e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to empty name field",
                  "fullTitle": "Users Module PUT /users Should return 400 due to empty name field",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .put(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name: \"\", email: invalidEmail});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"name\\\" is not allowed to be empty');",
                  "err": {},
                  "uuid": "ab797a8b-ac9c-4fd1-817a-b12dd6b32d7d",
                  "parentUUID": "fac554f8-337e-4f75-9980-424fb8b81e3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 400 due to empty email field",
                  "fullTitle": "Users Module PUT /users Should return 400 due to empty email field",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .put(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`)\n    .send({name: tempName, email: \"\"});\n\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', '\\\"email\\\" is not allowed to be empty');",
                  "err": {},
                  "uuid": "62c59a89-d08b-4d8f-a927-4e15ece50840",
                  "parentUUID": "fac554f8-337e-4f75-9980-424fb8b81e3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1960f04-016b-45dd-b1ae-dcaa32ec63c2",
                "2f3a8544-3bfe-474f-b870-207a47729452",
                "3e45224e-9779-49a0-8664-1eb3a10e405c",
                "42ccd472-478e-4c57-988c-e4f0c4744eb5",
                "a9894134-ab11-499f-a9b3-dcdc3cb7aae7",
                "ab797a8b-ac9c-4fd1-817a-b12dd6b32d7d",
                "62c59a89-d08b-4d8f-a927-4e15ece50840"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 665,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b07544ff-8dd9-43a0-8a0e-c14460da6603",
              "title": "DELETE /users/{userId}",
              "fullFile": "D:\\Belajar\\Sanbercode\\Automation Tester\\Mocha\\test\\major.test.js",
              "file": "\\test\\major.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return 200 and successfully delete by ID",
                  "fullTitle": "Users Module DELETE /users/{userId} Should return 200 and successfully delete by ID",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .del(`/users/${global.userId}`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('status', 'success');\nexpect(res.body).to.have.property('message', 'User berhasil dihapus');",
                  "err": {},
                  "uuid": "b5e7729c-118a-4ffa-ac65-20cefeca0fd5",
                  "parentUUID": "b07544ff-8dd9-43a0-8a0e-c14460da6603",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 404 due to unknown ID",
                  "fullTitle": "Users Module DELETE /users/{userId} Should return 404 due to unknown ID",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(global.token).to.not.be.empty;\nexpect(global.userId).to.not.be.empty;\nconst res = await request(baseUrl)\n    .del(`/users/9999`)\n    .set('Authorization', `Bearer ${global.token}`);\n\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('status', 'fail');\nexpect(res.body).to.have.property('message', 'id tidak valid');",
                  "err": {},
                  "uuid": "fa239db9-359b-46ac-9d2c-5f23c561c7fb",
                  "parentUUID": "b07544ff-8dd9-43a0-8a0e-c14460da6603",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5e7729c-118a-4ffa-ac65-20cefeca0fd5",
                "fa239db9-359b-46ac-9d2c-5f23c561c7fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}